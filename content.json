{"meta":{"title":"Danny Allegrezza","subtitle":"Musings and Ramblings","description":"My personal Blog","author":"Danny Allegrezza","url":"http://dannyallegrezza.com"},"pages":[{"title":"tags","date":"2017-08-15T03:00:12.000Z","updated":"2017-11-14T00:32:00.639Z","comments":true,"path":"tags/index.html","permalink":"http://dannyallegrezza.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-11-14T00:32:00.634Z","updated":"2017-11-14T00:32:00.634Z","comments":true,"path":"categories/index.html","permalink":"http://dannyallegrezza.com/categories/index.html","excerpt":"","text":""},{"title":"About Me","date":"2017-08-15T03:00:41.000Z","updated":"2017-11-14T00:32:00.632Z","comments":true,"path":"about/index.html","permalink":"http://dannyallegrezza.com/about/index.html","excerpt":"","text":"My name is Danny Allegrezza and I’m happy you’ve stumbled upon my little space on the web. I’m a software developer who lives and works in the Cary, NC area. I’ll be using this blog to write about code, technology, the internet, cars and entrepreneurship. Work ExperienceMy LinkedIn profile gives a great overview of my professional work experience. As of recent, I’ve been working on integrating systems and server-side development. I have spent a lot of time working in the .NET ecosystem, primarily using C#. I have experience with WinForms, WPF, Web Services, Web API and ASP.NET MVC. I’ve worked with additional languages including Java, PHP and some Go. Ultimately, I prefer whatever language is best fit to solve the problem at hand. Current Project Cars 1991 Nissan 240SX - Now featuring 3.0L of Toyota Power!"}],"posts":[{"title":"DotNet Tips - The DebuggerDisplay() attribute","slug":"DebuggerDisplay","date":"2017-10-09T15:01:40.000Z","updated":"2017-11-14T00:32:00.614Z","comments":true,"path":"2017/10/09/DebuggerDisplay/","link":"","permalink":"http://dannyallegrezza.com/2017/10/09/DebuggerDisplay/","excerpt":"Debugging is one of the most crucial skills that a software developer can possess. I want to share a tip I recently learned while watching a great Pluralsight course. When debugging your C# code, wouldn’t it be nice to know some interesting data about the giant collection of objects you are hovering over? That is where the DebuggerDisplay() attribute steps in!","text":"Debugging is one of the most crucial skills that a software developer can possess. I want to share a tip I recently learned while watching a great Pluralsight course. When debugging your C# code, wouldn’t it be nice to know some interesting data about the giant collection of objects you are hovering over? That is where the DebuggerDisplay() attribute steps in! To quote the excellent MSDN docs: Debugger display attributes allow the developer of the type, who specifies and best understands the runtime behavior of that type, to also specify what that type will look like when it is displayed in a debugger. How to use the DebuggerDisplay() attributeLet’s assume we have a simple Person class who is not using the DebuggerDisplay functionality. 1234567891011public class PersonWithoutDebuggerDisplay&#123; public string Name &#123; get; set; &#125; public int AgeInYears &#123; get; set; &#125; public PersonWithoutDebuggerDisplay(string name, int years) &#123; Name = name; AgeInYears = years; &#125;&#125; Add using statement for System.Diagnostics. Decorate your class or property with the [DebuggerDisplay(&quot;&quot;)] attribute. Inside the quotation marks you can write your own custom message which will override the default message, which simply displays either your types information or the ToString() override if one is present. For example: 123456789101112[DebuggerDisplay(\"This person is named &#123;Name&#125; and is &#123;AgeInYears&#125; old\")]public class PersonWithoutDebuggerDisplay&#123; public string Name &#123; get; set; &#125; public int AgeInYears &#123; get; set; &#125; public PersonWithoutDebuggerDisplay(string name, int years) &#123; Name = name; AgeInYears = years; &#125;&#125; To me, this could definitely help save me some extra clicks and would be helpful when working with a large collection of complex data. Considerations There will be overhead for this operation If we name our properties well, we shouldn’t need to use this What are your thoughts on the DebuggerDisplayAttribute?","categories":[{"name":"Code","slug":"Code","permalink":"http://dannyallegrezza.com/categories/Code/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://dannyallegrezza.com/tags/C/"},{"name":"tips","slug":"tips","permalink":"http://dannyallegrezza.com/tags/tips/"}]},{"title":"Intro to Git/Github","slug":"Github","date":"2017-04-16T18:58:06.000Z","updated":"2017-11-14T00:34:06.413Z","comments":true,"path":"2017/04/16/Github/","link":"","permalink":"http://dannyallegrezza.com/2017/04/16/Github/","excerpt":"Git 101Today we will be discussing the fundamentals of git, a tool which allows groups of people to work on the same documents (often code) at the same time, and without stepping on each others toes. It is a distributed version control system. Originally created by Linus Torvalds, git differs from other source control systems, such as SVN due to it’s distributed nature. I’ll cover some basics to help you get started. Setting up Git","text":"Git 101Today we will be discussing the fundamentals of git, a tool which allows groups of people to work on the same documents (often code) at the same time, and without stepping on each others toes. It is a distributed version control system. Originally created by Linus Torvalds, git differs from other source control systems, such as SVN due to it’s distributed nature. I’ll cover some basics to help you get started. Setting up Git Assuming you have git installed on your machine, you’ll want to get started configuring it. Your first step is to setup your username, your email so that way you can take credit for your changes! 123git config --global user.name &quot;Danny Allegrezza&quot;git config --global user.email &lt;you@you.com&gt;git config --global color.ui true git help [command name] Workflow for gitHere is an example of a users workflow when using Git Danny creates a README.txt file Add file to the staging area Commit changes (git commit -m &quot;created the initial readme file&quot;) Danny modifies README.txt file &amp; add LICENSE Add both files to staging area Commit changes (git commit -m &quot;updated readme and added license&quot;) Initializing your First Repo Start in a directory (ex: /myfolder/) To initialize a Git repository here, type the following command git init. git status shows the status of your repository and any changes that have occurred. If you have added files and then do a git status, git will show you the changed files. Quick AdviceOne can use git _____ + any of these commands: untracked: files (generally in red). staged:Files are ready to be committed. unstaged:Files with changes that have not been prepared to be committed. untracked:Files aren’t tracked by Git yet. This usually indicates a newly created file. deleted:File has been deleted and is waiting to be removed from Git. add all:You can also type git add -A . where the dot (.) stands for the current directory, so everything in and beneath it is added. The -A ensures even file deletions are included. You can also use git add . git reset:You can use git reset &lt;filename&gt; to remove a file or files from the staging area. More useful logs:Use git log --summary to see more information for each commit. You can see where new files were added for the first time or where files were deleted. It’s a good overview of what’s going on in the project. Adding filesFirst, we need to do a git add and stage our files. Once we’ve got everything ready to go, we can do our commit. git commit -m &#39;My message summary here&#39; If we want, we can view the Log by typing git log. Think of the Log as a journal of all of the commits that have taken place to the repository. Keep in mind these are on our local repository. If we want to push these to a Remote repository, such as one hosted on GitHub.com or BitBucket, we would need to do the following: git remote add origin https://github.com/my-account/mygit.git Let’s break that down further:This command takes a remote name and a repository URL git remote add - the command to add a new remote repository origin : this is what we happened to name our remote repo. “origin” git remote:Git doesn’t care what you name your remotes, but it’s typical to name your main one origin. It’s also a good idea for your main repository to be on a remote server like GitHub in case your machine is lost at sea during a transatlantic boat cruise or crushed by three monkey statues during an earthquake. Pushing RemotelyThe push command tells Git where to put our commits when we’re ready. To push our local changes to our origin repo (on GitHub): git push -u origin master ###Let’s break that down…git push This is the “push” command -u : The -u tells Git to remember the parameters, so the next time we can simply run git push and Git will know what to do. origin: The name of our remote. In our case, this is “origin” master: The default local branch name is master Pulling RemotelyLet’s pretend that some time has passed. We’ve invited other people to our GitHub project who have pulled your changes, made their own commits, and pushed them. We can check for changes on our GitHub repository and pull down and new changes by running: git pull origin master DifferencesWhat happens when there are differences from the local machine and the remote repo? We can use a git diff command to take a look at what is DIFFERENT from our last commit by using the git diff command. In this example, we want the diff of our most recent commit, which we can refer to using the HEAD pointer git diff HEAD Differences in Staged Filesgit diff --staged Resetting the StageYou can unstage files by using the git reset command. Ex: git reset myFile.txt Undogit reset does unstaging files, but it doesn’t remove them. If you REALLY want to go back in time and UNDO, you can use git checkout &lt;target&gt;. This will get rid of all of the changes since the last commit. git checkout --octocat.txt BranchesBranches are used when developers are working on a feature or bug. They’ll often create a copy (aka. branch) of their code so that they can make separate commits to. Then, when they are done they can MERGE this branch back into their main master branch. git branch dev_clean_up This would create a new branch called dev_clean_up You can type git branch to show all local branches To switch between branchesYou can switch between branches using the git checkout command. So, let’s switch to the dev_clean_up branch. git checkout clean_up Cleanup time! Removing all the thingsNow we are in the dev_clean_up branch. We can remove files with git rm, which will not only remove the actual files from disk, but will also stage the removal of the files for us. ex: remove all text files git rm &#39;*.txt&#39; then let’s do a git status NICE TO KNOW:The ‘-a’ optionIf you happen to delete a file without using ‘git rm’, you’ll find that you STILL HAVE TO ‘git rm’ the deleted files from the working tree. You can save this step by using the ‘-a’ option on git commit, which auto removes deleted files with the commit. ex: git commit -am &quot;Deleting stuff&quot; Switching back to the Master BranchSo now we’ve edited the branch and we want to switch back to the master branch so you can copy (or merge) your changes from the dev_clean_up branch back into the master branch. git checkout master - this says check me out of my current branch and place me in the ‘master’ branch. NOTE: If you’re hosting your repo on GitHub, you can do something called a pull request. A pull request allows the boss of the project to look through your changes and make comments before deciding to merge in the change. It’s a really great feature that is used all the time for remote works and open-source projects. Preparing to MergeThe final step! Now that we are back into our master branch it is time to merge in the changes from devcleanup branch. git merge dev_clean_up Keeping things cleanNow that we have successfully merged in our branch, it’s usually a good idea to clean up after yourself. Since we are done with the dev_clean_up branch, we do not need it anymore. You can use git branch -d &lt;branch name&gt; to delete a branch. git branch -d dev_clean_up The final Push!The final step. Now we need to push everything we’ve been working on locally to your remote repository. git push","categories":[{"name":"Code","slug":"Code","permalink":"http://dannyallegrezza.com/categories/Code/"}],"tags":[{"name":"github","slug":"github","permalink":"http://dannyallegrezza.com/tags/github/"},{"name":"intro","slug":"intro","permalink":"http://dannyallegrezza.com/tags/intro/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-01-01T19:58:06.000Z","updated":"2017-11-14T00:32:00.629Z","comments":true,"path":"2017/01/01/hello-world/","link":"","permalink":"http://dannyallegrezza.com/2017/01/01/hello-world/","excerpt":"","text":"Hello world. Welcome to my personal space on the Internet. My name is Danny Allegrezza and I am a software engineer living in Cary, North Carolina. I’ll be using this space to blog about cars, code, cats, and occasionally my personal life. This is a new iteration of my website, so I’ll be slowly back-filling in this blog with back-dated posts.","categories":[{"name":"General","slug":"General","permalink":"http://dannyallegrezza.com/categories/General/"}],"tags":[]}]}